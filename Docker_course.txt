Docker course
Comprehension DOcker
les etapes 
hello
COurs et comprehension 


La technologie de la virualisation :
1 Containers : APP1:Bin/LIB APP2:Bin/
Container Engine
Operatin System
Infrastructue

 Client Server :
 Docker client : Primary user when client push command and communicate with Docker Deamon:
        Docker build
        Docker Pull
        Dockker Run 


Docker Deamon: Where running Container

Docker_Host : Running DOcker client and Docker Deamon


Docker Deamon running in Linux VM in windows 10 (Docker machine )

Image (class)
    liy juste le template utilise pour creer de contenaire
    l image est creer avec ke docker build command ou par moi ou autre docker users
    l image comprend de couche (layers of images)
    il sont stok dans le Docker registry 

Container (instance de l image):
    runtime object
    on cree le Container from images. ds le container  il y a tout la dependence binaire pour rouler une application 

Registries and Repositories :
    la ou on stock  l image
    tu peux hoster ton propre regisstry ou tu peux utiliser celui de docker qui est publique qu on appelle DockerHub
    dans le registry, les images sont stocke dans le repositories.
    Docker REPOSITORY:
        Collection de different docker images avec le meme nom qui on diffents tags et chaque tag represent une version diffente d image 

Docker HUB: 
 Public Docker Registry 

  docker run busybox:1.24 echo "hello world"
   docker run busybox:1.24 ls

   the -i flag starts an interactivw container.
   the -t flag creates a pseudo -tty that attaches stin and stdout

        Naviguer dans l image:
             winpty docker run -i -t busybox:1.24


Foreground VS Detached :

The Linux Sleep COMMAND is used to delay for a specified amount of time
            docker run -d busybox:1.24  sleep 1000

            docker ps : verifier le container
            docker ps -a: pour verifier tous les containers
            docker run --rm busybox1.24 : fermer le container
           docker run --name hello_world busybox:1.24: pecify docker container we wna to run 

           Docker inspeck:
           $ docker run -d busybox:1.24 sleep 100


        docker inspeck $ docker run -d busybox:1.24 sleep 100
c22baf1cee09a0d5ab19f191238b7a72826348b4398c18a2c7bf79c2ffd90dad



TOMCAT CONTAINER(IMAGE):

 -p host-port: container_port

 winpty docker run -it -p 8888:8080 tomcat:8.0
  winpty docker run -it -d -p 8888:8080 tomcat:8.0: allow container running on the backround 


$ winpty docker run -it -d -p 8888:8080 tomcat:8.0
a8bbf4691458c9fd71f2b33fef29d7c3acc07cc0f39f32d8cd89c10c1ebd9f55


-===Voir le log :
    docker logs a8bbf4691458c9fd71f2b33fef29d7c3acc07cc0f39f32d8cd89c10c1ebd9f55




    DOCKER IMAGE LAYER :
        CONTAINERIMAGE


        to show layer image :  docker history busybox:1.24
        comme busybox est composer de deux couche 
        la couche de base pourr creer le file et la couche de commande Bash

        toutes les change se passe dans le writable layer
        quand le copntainer est delete le writable layer est delete aussi



    Build DOCKER IMAGE:
        commit changes made in a Docker Container 
        Write a DockerFile
            STEPS:
                sPIN UP a container from a base image
                Install Git Package in containerCommit Changes Made in the Container\
                On va utiliser DEBIAN (IMAGE LINUX)
                Run debian : 
                winpty docker run -it debian:jessie
                Install git in this container:
                    apt-get update && apt-get install -y git


                commit our container as a new docker image:
                    docker commit command would save the change we made in the container file system to a new image


                    docker commit container_ID repository_name:tag

                    executer la command docker ps -a pour avoir le ID du container

                        docker commit 9924c6cb3776 kimbo/debian:1.00
                        sha256:97cbbdb74fca1c4daa522d321b1c9f773fa829d01069c922346fc693cca6e9c2 : la nouvelle image qui porte mon nom (ID)

                    pour verifier l image creer :
                         docker images
                         la base la layer est le debian qui nous a permis de creer notre propre image 

                    pour rouler notre image :
                             winpty docker run -it kimbo/debian:1.00




    Build Docker Image with DockerFile:
        Document test avec les instruction que les users fournissent pour rassembler une image
        chaque instructuion va creer une couche d image pour l image

                Creation d un Dockerfile : doit Ãªtre sans extension touch DOCKER 
                    touch Dockerfile
                    vi Dockerfile
                    les instruction :
                                FROM debian:jessie
                                RUN apt-get update
                                RUN apt-get install -y git
                                RUN apt-get install -y vim
                                wq!

                    docker build pour creer notrer image avec les instruction :
                        docker build -t le_nom_quon_donne_a_limage lePath_ou_le_dockerfile_se_trouve:  docker build -t kimbo/debian .


                            Docker build commmand takes the path to the build context as an argument
                                    docker images


        DOCKER In-depth: CHAIN RUN INSTRUCTION 
                Each RUNN command will execute the command on the top writable layer  the container then commit container as a new image
                Each Run instruction willl create a new image layer
                it recommande to chain the Run INSTRUCTIONS in Dockerfile to reduce the numve of image layers int creates

                Rebulit IMAGE with less instructiion:
                    FROM debian:jessie
                    RUN apt-get update && apt-get install -y \
                    git \
                    vim
                    
                    Rebuild image :
                        docker build -t kimbo/debian .

                    On peut utiliser un package dans l image par exemple entre git et vim: 

                    FROM debian:jessie
                    RUN apt-get update && apt-get install -y \
                    git \
                    python
                    vim



        CMD Instructions :
            Specifie quelle commeande tu veux run quand tu debute ton container
            sinon on ne specifie pas le CMD ds le Dockerfile, on ne utilisera e default command de l image de Base
            pour debiand le default est bash 

                    $ cat Dockerfile
                    FROM debian:jessie
                    RUN apt-get update && apt-get install -y \
                    git \
                    vim
                    CMD ["echo", "kimbo dev"]

                    REBUILD:
                         docker build -t kimbo/debian .

                         docker run ID_IMAGE
                         WE CAN RUN OTHER LINE WITH 
                         docker run ID_IMAGE echov"Hello Docker"


        DOCKER Cache:
            Each time Docker executes an instruction it builds a neww image layer.

            we can disale cach :
                docker build -t kimbo/debian . --no-cache=true

        COPY Instruction :
            Avec l instruction COPY
            $ cat Dockerfile
                FROM debian:jessie
                RUN apt-get update && apt-get install -y \
                git \
                vim
                COPY file.py /scr/file.py
               Rubuild image and run container RUNC IMAG 


        ADD iNSRTRUCTION 
        ALLOW YOU DOWNLOAD FILE FROM INTERNET 
        CAN COMPRESSED FILE 



        ================= PUSH DOCKER IMAGES TO DOCKER HUB ===================
        To push image to DOCKER DockerHub
        Rename the Image :
            docker_hub_id / repository_name
            docker images
            docker tag 50cfe3e14717 kimbo/debian:1.01

Docker login : winpty docker login --username=kimbo150

docker push kimbo/debian:1.01

"docker login <url> --username=<username>"


CREATE CONTAINERIZED WEB APPLICATION 

             docker build -t dockerapp:v0.1 .
            docker images
            run notre container :
                docker run -d -p 5000:5000 b5913058a6d8
                -d: run conmtainer in background
                -p: expose le port
                par defaut python va rouler sur le port 5000 et le port 5000 host (l0cal)
                 docker run -d -p 5000:5000 b5913058a6d8
                    6a873a54b3b0c924fe66533dd87f10fbb63472e2cf597a2bcdc2aedb5b24fca8

                    On doit chercher quel IP python utilise : la commande docker-machie ls

                     docker exec -it ea940edda7e9 acceder via le bash


Implement a simple Key-value Lookup Service 


            stop container bdefore staert same cotainer with different tag : $ docker stop ea940edda7e9



Docker Container Links :
Allow diffeent container communicate each others : Recipeient >>> host >>> Source 

$ docker run -d -p 5000:5000 --link redis dockerappp:v0.2
2d519bc03a5212ead43ecaee7d5c4bc630738069824731ea1579462e28dcb796
Veriofy REdis IP : docker inspect 144f5832ec49 | grep IP
GO TO CONTAINER AND PING REDIS : winpty docker exec -it 2d519bc03a52 bash



AUTOMATE CURRENT WORKFLOW WITH DOCKER COMPOSE : DOCKER COMPOSE : GOOGLE 
TO vberify if Docker compose exist :
    docker-compose version 
    crerate docke-compose file
    docker-compose up : to docker-compose

     docker-compose up -d : left docker compose to run in background
     docker-compose ps 
     docker-compose logs -f
     docker-compose stop
     docker-compose rm



     hoow to force docker to rebui the imafge :docker-compose build


     ================= Docker CONTAINER NETWORKING =====================

     CONTANAER A B (private network interface)

     BRIDGE (DOCKER0)

     host

     INTERNET 



     CHEK : docker networks ls 

     Docker network Types
        Closed Network/ None networks
        Bridge networkshost
        Host Networks 
        NetworkOverlay 


        $ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
285ffcce2f3a        bridge              bridge              local
41b75acd0225        host                host                local
adc27ac04c73        none    


    ============ None Network =================

     docker run -d --net none busybox sleep 1000 :run image 

     logon in container :
     $ winpty docker exec -it d924d0ae09d13f89404dd77e34905df80a6964b06089a176bf3a4c81d1876943 bin/ash

    / # ifconfig
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)


          ================ Bridge Network ====================
All container are connecte each Others 
docker network inspect bridge 

 docker run -d --name container_1 busybox sleep 1000
389b656753e1e7d31413e18f052fb12f7009818b88cd6426c1313180fad6265b

check IP NETWORKK IN CONTAINER :

$ docker exec -t container_1  ifconfig

eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0 (USE Thos ip to communicate different container )
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:15 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1242 (1.2 KiB)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)


$ docker exec -t container_3  ping 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.665 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.125 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.106 ms
64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.086 ms


$ docker exec -t container_3  ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: seq=0 ttl=37 time=12.459 ms
64 bytes from 8.8.8.8: seq=1 ttl=37 time=9.771 ms

Create Docker Network :
docker network create --driver bridge my_bridge_network
 docker network inspect c20d6b7a29ff36bb8799e83a7d595977dae5ba0e5c044627e6e9d06aebe72823


add container to add bridge_network :
    docker network connect bridge container_4


    yannick.kipepo_kimbo@B01S2I20 MINGW64 ~
$ docker exec -t container_4  ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:12:00:02
          inet addr:172.18.0.2  Bcast:172.18.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:16 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1312 (1.2 KiB)  TX bytes:0 (0.0 B)

eth1      Link encap:Ethernet  HWaddr 02:42:AC:11:00:04
          inet addr:172.17.0.4  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:7 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:586 (586.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)



Disconeet container to other bige network :
    docker network disconnect bridge name of container 

    Bref Brige Net : 2 IP Lo0 and eth0, container from different bridge can't connect eache other , nert to connect the bridge 



================= Host Network ======================
Open container they they call it 

docker run -d --name container5 --net host busybox sleep 1000


$ winpty docker exec -it container5 ifconfig
br-c20d6b7a29ff Link encap:Ethernet  HWaddr 02:42:EF:AC:EB:50
          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:efff:feac:eb50/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:5 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:446 (446.0 B)

docker0   Link encap:Ethernet  HWaddr 02:42:52:89:C9:7A
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:52ff:fe89:c97a/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:828 errors:0 dropped:0 overruns:0 frame:0
          TX packets:832 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:66304 (64.7 KiB)  TX bytes:78300 (76.4 KiB)

eth0      Link encap:Ethernet  HWaddr 02:50:00:00:00:01
          inet addr:192.168.65.3  Bcast:192.168.65.15  Mask:255.255.255.240
          inet6 addr: fe80::50:ff:fe00:1/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1494 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1231 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:934784 (912.8 KiB)  TX bytes:117490 (114.7 KiB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:802 errors:0 dropped:0 overruns:0 frame:0
          TX packets:802 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:78540 (76.6 KiB)  TX bytes:78540 (76.6 KiB)

veth125c9ee Link encap:Ethernet  HWaddr 32:1C:18:8B:82:CA
          inet6 addr: fe80::301c:18ff:fe8b:82ca/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1693 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1706 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:159754 (156.0 KiB)  TX bytes:160760 (156.9 KiB)

veth3be5f17 Link encap:Ethernet  HWaddr CA:BE:DB:73:D2:28
          inet6 addr: fe80::c8be:dbff:fe73:d228/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:866 errors:0 dropped:0 overruns:0 frame:0
          TX packets:881 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:81900 (79.9 KiB)  TX bytes:83018 (81.0 KiB)

vetha4bdb77 Link encap:Ethernet  HWaddr F6:3B:25:7F:67:21
          inet6 addr: fe80::f43b:25ff:fe7f:6721/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:1452 (1.4 KiB)

vetha7f2291 Link encap:Ethernet  HWaddr AA:53:BE:3B:60:5E
          inet6 addr: fe80::a853:beff:fe3b:605e/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:936 (936.0 B)


Has all Different IP for all HOst Machine




================= Overlay Network ======================
support multi-hopst Networking out-of-the box 


Define Conmtainer with DOCKER cOMPOSE 



=========================== Fit Docker Technology into Continuous====================

Continuous integration is a software engineering practice in which
isolated changes are immediately tested and reported when they are
added to a larger code base.

The goal of Continuous integration is to provide rapid feedback so that if
a defect is introduced into the code base, it can be identified and
corrected as soon as possible.

======== Docker-Mmachine =================
docker-machine ls

Docker swarm : point multlpe docker conter :
    has Manager Node 
    