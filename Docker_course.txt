Docker course
Comprehension DOcker
les etapes 
hello
COurs et comprehension 


La technologie de la virualisation :
1 Containers : APP1:Bin/LIB APP2:Bin/
Container Engine
Operatin System
Infrastructue

 Client Server :
 Docker client : Primary user when client push command and communicate with Docker Deamon:
        Docker build
        Docker Pull
        Dockker Run 


Docker Deamon: Where running Container

Docker_Host : Running DOcker client and Docker Deamon


Docker Deamon running in Linux VM in windows 10 (Docker machine )

Image (class)
    liy juste le template utilise pour creer de contenaire
    l image est creer avec ke docker build command ou par moi ou autre docker users
    l image comprend de couche (layers of images)
    il sont stok dans le Docker registry 

Container (instance de l image):
    runtime object
    on cree le Container from images. ds le container  il y a tout la dependence binaire pour rouler une application 

Registries and Repositories :
    la ou on stock  l image
    tu peux hoster ton propre regisstry ou tu peux utiliser celui de docker qui est publique qu on appelle DockerHub
    dans le registry, les images sont stocke dans le repositories.
    Docker REPOSITORY:
        Collection de different docker images avec le meme nom qui on diffents tags et chaque tag represent une version diffente d image 

Docker HUB: 
 Public Docker Registry 

  docker run busybox:1.24 echo "hello world"
   docker run busybox:1.24 ls

   the -i flag starts an interactivw container.
   the -t flag creates a pseudo -tty that attaches stin and stdout

        Naviguer dans l image:
             winpty docker run -i -t busybox:1.24


Foreground VS Detached :

The Linux Sleep COMMAND is used to delay for a specified amount of time
            docker run -d busybox:1.24  sleep 1000

            docker ps : verifier le container
            docker ps -a: pour verifier tous les containers
            docker run --rm busybox1.24 : fermer le container
           docker run --name hello_world busybox:1.24: pecify docker container we wna to run 

           Docker inspeck:
           $ docker run -d busybox:1.24 sleep 100


        docker inspeck $ docker run -d busybox:1.24 sleep 100
c22baf1cee09a0d5ab19f191238b7a72826348b4398c18a2c7bf79c2ffd90dad



TOMCAT CONTAINER(IMAGE):

 -p host-port: container_port

 winpty docker run -it -p 8888:8080 tomcat:8.0
  winpty docker run -it -d -p 8888:8080 tomcat:8.0: allow container running on the backround 


$ winpty docker run -it -d -p 8888:8080 tomcat:8.0
a8bbf4691458c9fd71f2b33fef29d7c3acc07cc0f39f32d8cd89c10c1ebd9f55


-===Voir le log :
    docker logs a8bbf4691458c9fd71f2b33fef29d7c3acc07cc0f39f32d8cd89c10c1ebd9f55




    DOCKER IMAGE LAYER :
        CONTAINERIMAGE


        to show layer image :  docker history busybox:1.24
        comme busybox est composer de deux couche 
        la couche de base pourr creer le file et la couche de commande Bash

        toutes les change se passe dans le writable layer
        quand le copntainer est delete le writable layer est delete aussi



    Build DOCKER IMAGE:
        commit changes made in a Docker Container 
        Write a DockerFile
            STEPS:
                sPIN UP a container from a base image
                Install Git Package in containerCommit Changes Made in the Container\
                On va utiliser DEBIAN (IMAGE LINUX)
                Run debian : 
                winpty docker run -it debian:jessie
                Install git in this container:
                    apt-get update && apt-get install -y git


                commit our container as a new docker image:
                    docker commit command would save the change we made in the container file system to a new image


                    docker commit container_ID repository_name:tag

                    executer la command docker ps -a pour avoir le ID du container

                        docker commit 9924c6cb3776 kimbo/debian:1.00
                        sha256:97cbbdb74fca1c4daa522d321b1c9f773fa829d01069c922346fc693cca6e9c2 : la nouvelle image qui porte mon nom (ID)

                    pour verifier l image creer :
                         docker images
                         la base la layer est le debian qui nous a permis de creer notre propre image 

                    pour rouler notre image :
                             winpty docker run -it kimbo/debian:1.00




    Build Docker Image with DockerFile:
        Document test avec les instruction que les users fournissent pour rassembler une image
        chaque instructuion va creer une couche d image pour l image

                Creation d un Dockerfile : doit Ãªtre sans extension touch DOCKER 
                    touch Dockerfile
                    vi Dockerfile
                    les instruction :
                                FROM debian:jessie
                                RUN apt-get update
                                RUN apt-get install -y git
                                RUN apt-get install -y vim
                                wq!

