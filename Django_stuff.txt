conda activate myEnv
info --envs
 conda deactivate
 django-admin startproject kimbo_django
 

 Init : perment que python considere le repetoire comme Package
 sitting : store all project setting 
 setting
 urls :"store all URL pattens for your project. Basically the different pages of web application
 wsgi: Py scrtipt that act as the web Server Gateway interface. deploy web app to production 
 manage.py : association de plusieurs commands for build web app

 >python manage.py runserver

 start app : python manage.py startapp kimbo_app
    __init__: idem
    admin.py : register your model and django will use with Django admin interface
    apps.py : application sepecic config
    models.py :store the application data models 
    tests.py : test function to test your conde 
    views.py : This is where you have functions that handle request and return response 

    Migrations Folder : stores database specific info as it relates to thje models











Templates :
    TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")
    'DIRS': [TEMPLATE_DIR],


======================== Help-APP ==================================
Creer l application : 
    python manage.py startapp help_app
    Ajouter l app dans le sitting INSTALLED_APPS:
    creer le views et le map avec URLS 
    DANS views:
        from django.http import HttpResponse
        from django.shortcuts import render
            CREER LA FONCTION RQUEST 

    DANS URLS_app :
    from django.conf.urls import url
    from help_app import views

    urlpatterns =[
        url(r'^$', views.index, name='index'),

    DANS URLS-GLOBAL:
        url(r'^$', views_help.index, name='index'),

        test le serveur : python manage.py runserver
    AJOUTER DANS TAMPLATE LE DIRECTORY help_app, creer le file index 

Creer url ds l app:
    DANS URLS_app :
    from django.conf.urls import url
    from help_app import views

    map avec le URL GLOBAL :
        url(r'^$', views_help.index, name='index'),
        url(r'^helpme/', include('help_app.urls'))

Mapping with urlsapp et urls_global and Views:
    def index(request):
    my_dict = {'insert_me':'Here page we can find all info for help!'}
    return render(request, 'help_app/index.html', context=my_dict)


==================== stactic images ======================
STATIC_DIR = os.path.join(BASE_DIR, "stactic")

STATICFILES_DIRS = [
    STATIC_DIR,
]
template : index 

<!DOCTYPE html>
{% load static %}
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Couple Kipepo</title>
        <link rel="stylesheet" href={% static 'css/mystyle.css' %}/>
    </head>
    <body>
     <h1>This is our WORLD</h1>

    <img src="{% static 'images/n83rspf_v5.jpg' %}" alt="ooooooooooooups">

    </body>
</html>



======================== Django Models Overview =============================================

SQL 
Set the model then migrate date base (SQL)
python manage.py migrate 
Migrate in admin file 
from django.contrib import admin 
from app.models import Model1, Moodl2 
admin.site.register (Model1)
admin.site.register(Model2)

communinicate with SQL 
via interface with super user 

    Creating Mdoels:
    apres avoir creer le model
        python manage.py migrate

        python manage.py makemigrations help_app

        python manage.py migrate
            pour confirmer que notre module fonctionne avec l appplication :
                >python manage.py shell
                from help_app.models import Topic


                verifions les Obkject dans la classe Topic:
                     print(Topic.objects.all())
                    creons l object 
                    t =Topic(top_name="Social Network"
                    t.save()
                    print(Topic.objects.all())

          ==================  Use admin django Interface in admin.py: 

            from django.contrib import admin
            from help_app.models import Topic, AccessRecord, Webpage

#           Register your models here.
            admin.site.register(Topic)
            admin.site.register(AccessRecord)
            admin.site.register(Webpage)

            TO USE DB WITH ADMIN INTERFACE NEED TO CREATE SUP USER:

                python manage.py createsuperuser
                kimbo, yaniq15@me,com, Bell1234 for admin interface

                >python manage.py runserver


================= Use dummy data to populate your models ========================
Faker library to create this scritpt :

pip install Faker

Populatin Models : =============

ave le faker labrary : 
    on creer un new file ex populate.py 
    on doit premierement : 
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kimbo_django.settings' )


    import django
    django.setup()
    on import nos classe de notre modele (app):
    from help_app.models import Topic, AccessRecord, Webpage

    apres avoir creer le fichier populate on doit le rouler :
        dans le env python 
        python populate.py(le fichier creer) ppour populer


==================== Model template VIEW , MTVB ========\
CONNECTE VIEW TO DATA BASE_DIR
1. in view.py import any models that we will; need to use 


    return render(request, 'help_app/index.html', context=date_dict)

2. use the view to query the model for data that we will NEED
    dans views (apop):
        from help_app.models import Topic, AccessRecord, Webpage
        def index(request):
    webpages_list = AccessRecord.objects.order_by('date')
    date_dict= {'access_records':webpages_list}

3.pass results from the model to to template
dans le fichier index dossier template

4 Edit thetemplate so that is ready to accept and dispaly the data from model
5.Map a URL to the view.


EXERCICE MODEL ===============  REVION DJANGO APPLICATION ==============================

Create new project DJANGO_REVISION____ AND ACTIVAT ENV 
conda info --envs


Create APP: ==========================
    creat views in app and map it in url
    add app in setting : INSTALLED_APPS
    conda create --name myenv
    conda activate myEnv
    ango-admin startproject kimbo_revesion_django


    create APP: python manage.py startapp python manage.py startapp chrsikimb_app

    cree un folder templade dans le chriskim (global)

    dans templates on cree encore un rep chrsikimb_app

    dans chrsikimb_app on cree:
            users.html
            index.html

    dans Setting on ajoute notre template et notre app :
        TEMPLATE_DIR= os.path.join(BASE_DIR, 'templates') 
            TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR,],



        INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chrsikimb_app', 
]========

            ===========Ajout du model =============

            from django.db import models

# Create your models here.

class User(models.Model):
    fist_name = models.CharField(max_length=128)
    las_name = models.CharField(max_length=128)
    email = models.EmailField(max_length=128, unique=True) # on veut que l email soit unique 




  =================== ajoout du view   ======================
on map ce qu on mis dans le model
  from django.shortcuts import render
from chrsikimb_app.models import User

# Create your views here dans l app.

def index(request):
    return render(request, 'chrsikimb_app/index.html')

def users(request):

    user_list = User.objects.order_by('first_name')
    user_dict = {'users': user_list}
    return render(request, 'chrsikimb_app/users.html', context=user_dict)


    ====================== Ajout URL ================================
    cree un file urls DANS L APP (map with view)

from django.conf.urls import url

from chrsikimb_app import views

urlpatterns = [
    url(r'^$', views.users, name='users')
    path('admin/', admin.site.urls),
    url(r'^users/', include('chrsikimb_app.urls')) # when we use incleude module


]

then GLOBAL URL : ***************

from django.conf.urls import url, include
from django.contrib import admin
from django.urls import path
from chrsikimb_app import views

urlpatterns = [
    url(r'^$', views.users, name='users'),
    path('admin/', admin.site.urls),
    url(r'^users/', include('chrsikimb_app.urls')) # when we use incleude module
]



=================Migrate the model to DB =====================

    python manage.py migrate
    

    register the change : python manage.py makemigrations chrsikimb_app
    to apply mig : >python manage.py migrate


+=================== us admin interface ======================

from django.contrib import admin
from chrsikimb_app.models import User


# Register your models here.
admin.site.register(User)

=============== RUN SERVER TO VERIFY =============
python manage.py runserver

if ok then create a superuser :
    python manage.py createsuperuser
    >python manage.py migrate
    python manage.py runserver


====================== Populate the DB ==========================

Creat Populate script in Global :


import os


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kimbo_revesion_django.settings' )

import django
django.setup()






from chrsikimb_app.models import User
from faker import Faker


fakegen = Faker()

def populate(N=5):
    for entry in range(N):
        fake_name = fakegen.name().split()
        fake_first_name =fake_name[0]
        fake_last_name = fake_name[1]
        fake_email=fakegen.email()

        # New ENTRY :
    user =User.objects.get_or_create(first_name=fake_first_name, las_name= fake_last_name, email=fake_email)



if __name__=='__main__':
    print('POPULATINF DATABASES')
    populate(10)
    print('Complete')



=================== Template taging ========================
users.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Users</title>
</head>
<body>
    <h1>Here are user for Christ_kimb</h1>
    {% if users %}
    <ol>
        {% for person in users %}
        <li>User info</li>
        <ul>
            <li>First Name: {{person.first_name}}</li>
            <li>First Name: {{person.last_name}}</li>
            <li>Email: {{person.email}}</li>
        </ul>
        {% endfor %}
    </ol>

    {% endif %}


</body>
</html>


========================== DJANGO LEVEL TREE ========================
ON CREER NOTRE PROJET 
Avec django admin command 
on cree l appon cree le dossier templateon cree le fichie htlm , index et form 
AJOUT TEMP ANS pp Dans sitting

creer u file formapp.py ds  app

from django import forms

class FormName(forms.Form):
    name= forms.CharField()
    emauil =forms.EmailField()
    text = forms.CharField(widget=forms.Textarea)

    Views ===============

    from django.shortcuts import render
from . import forms
# Create your views here.

def index(request):
    return render(request, 'basicapp/index.html')


def from_name_view(request):
    form = forms.FormName()
    if request.method == 'POST':
        form = forms.FormName(request.POST)

        if form.is_valid():
            # DO SOMEETHING CODDE
            print("VALIDATION SUCCESS!")
            print("NAME: " +form.cleaned_data['name'])
            print("EMAIL: " + form.cleaned_data['email'])
            print("TEXT: " + form.cleaned_data['text'])


    Now time to point url file : =======================
    from django.contrib import admin
from django.urls import path
from django.conf.urls import url
from basicapp import views


urlpatterns = [
    url(r'^$', views.index, name='index'),
    path('admin/', admin.site.urls),
    url(r'^formpage', views.from_name_view, name='form_name')

=============== index 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
     <link rel="stylesheet" href="https://google.com" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        <div class="jumbotron">
            <h1>Well co to Kimbo House</h1>
            <h2>Go to / formpage to fill out the form </h2>
        </div>
    </div>

</body>
</html>


====================== form 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Forms</title>
    <link rel="stylesheet" href="https://google.com" crossorigin="anonymous">

</head>
<body>
    <h1>Fill out the form!</h1>
    <div class="container">
        <form  method="post">
             {{form.as_p}}
            {% csrf_token %}
            <input type="submit" class="btn btn-primary" value="Submit">
        </form>


    </div>

</body>
</html>


================= FORM VALIDATION ==========================
IN FORM.Py




======================= FORM MODEL  ================