conda activate myEnv
info --envs
 conda deactivate
 django-admin startproject kimbo_django
 

 Init : perment que python considere le repetoire comme Package
 sitting : store all project setting 
 setting
 urls :"store all URL pattens for your project. Basically the different pages of web application
 wsgi: Py scrtipt that act as the web Server Gateway interface. deploy web app to production 
 manage.py : association de plusieurs commands for build web app

 >python manage.py runserver

 start app : python manage.py startapp kimbo_app
    __init__: idem
    admin.py : register your model and django will use with Django admin interface
    apps.py : application sepecic config
    models.py :store the application data models 
    tests.py : test function to test your conde 
    views.py : This is where you have functions that handle request and return response 

    Migrations Folder : stores database specific info as it relates to thje models

Create APP: ==========================
    creat views in app and map it in url
    add app in setting : INSTALLED_APPS


Templates :
    TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")
    'DIRS': [TEMPLATE_DIR],


======================== Help-APP ==================================
Creer l application : 
    python manage.py startapp help_app
    Ajouter l app dans le sitting INSTALLED_APPS:
    creer le views et le map avec URLS 
    DANS views:
        from django.http import HttpResponse
        from django.shortcuts import render
            CREER LA FONCTION RQUEST 

    DANS URLS_app :
    from django.conf.urls import url
    from help_app import views

    urlpatterns =[
        url(r'^$', views.index, name='index'),

    DANS URLS-GLOBAL:
        url(r'^$', views_help.index, name='index'),

        test le serveur : python manage.py runserver
    AJOUTER DANS TAMPLATE LE DIRECTORY help_app, creer le file index 

Creer url ds l app:
    DANS URLS_app :
    from django.conf.urls import url
    from help_app import views

    map avec le URL GLOBAL :
        url(r'^$', views_help.index, name='index'),
        url(r'^helpme/', include('help_app.urls'))

Mapping with urlsapp et urls_global and Views:
    def index(request):
    my_dict = {'insert_me':'Here page we can find all info for help!'}
    return render(request, 'help_app/index.html', context=my_dict)


==================== stactic images ======================
STATIC_DIR = os.path.join(BASE_DIR, "stactic")

STATICFILES_DIRS = [
    STATIC_DIR,
]
template : index 

<!DOCTYPE html>
{% load static %}
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Couple Kipepo</title>
        <link rel="stylesheet" href={% static 'css/mystyle.css' %}/>
    </head>
    <body>
     <h1>This is our WORLD</h1>

    <img src="{% static 'images/n83rspf_v5.jpg' %}" alt="ooooooooooooups">

    </body>
</html>



======================== Django Models Overview =============================================

SQL 
Set the model then migrate date base (SQL)
python manage.py migrate 
Migrate in admin file 
from django.contrib import admin 
from app.models import Model1, Moodl2 
admin.site.register (Model1)
admin.site.register(Model2)

communinicate with SQL 
via interface with super user 

    Creating Mdoels:
    apres avoir creer le model
        python manage.py migrate

        python manage.py makemigrations help_app

        python manage.py migrate
            pour confirmer que notre module fonctionne avec l appplication :
                >python manage.py shell
                from help_app.models import Topic


                verifions les Obkject dans la classe Topic:
                     print(Topic.objects.all())
                    creons l object 
                    t =Topic(top_name="Social Network"
                    t.save()
                    print(Topic.objects.all())

          ==================  Use admin django Interface in admin.py: 

            from django.contrib import admin
            from help_app.models import Topic, AccessRecord, Webpage

#           Register your models here.
            admin.site.register(Topic)
            admin.site.register(AccessRecord)
            admin.site.register(Webpage)

            TO USE DB WITH ADMIN INTERFACE NEED TO CREATE SUP USER:

                python manage.py createsuperuser
                kimbo, yaniq15@me,com, Bell1234 for admin interface

                >python manage.py runserver


================= Use dummy data to populate your models ========================
Faker library to create this scritpt :

pip install Faker

Populatin Models : =============

ave le faker labrary : 
    on creer un new file ex populate.py 
    on doit premierement : 
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kimbo_django.settings' )


    import django
    django.setup()
    on import nos classe de notre modele (app):
    from help_app.models import Topic, AccessRecord, Webpage

    apres avoir creer le fichier populate on doit le rouler :
        dans le env python 
        python populate.py(le fichier creer) ppour populer


==================== Model template VIEW , MTVB ========\
CONNECTE VIEW TO DATA BASE_DIR
1. in view.py import any models that we will; need to use 


    return render(request, 'help_app/index.html', context=date_dict)

2. use the view to query the model for data that we will NEED
    dans views (apop):
        from help_app.models import Topic, AccessRecord, Webpage
        def index(request):
    webpages_list = AccessRecord.objects.order_by('date')
    date_dict= {'access_records':webpages_list}

3.pass results from the model to to template
dans le fichier index dossier template

4 Edit thetemplate so that is ready to accept and dispaly the data from model
5.Map a URL to the view.


EXERCICE MODEL ===============  REVION DJANGO APPLICATION ==============================



